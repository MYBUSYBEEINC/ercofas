@model NetStarter.Models.PreFiledCaseViewModel
@using NetStarter.CustomHelper
@using NetStarter.Resources
@{
    if (string.IsNullOrEmpty(Model.Id))
    {
        ViewBag.Title = "File Case";
    }
    else
    {
        ViewBag.Title = "Filed Case Approval";
    }
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
}

<div class="row">
    <div class="col-12">
        <div style="--bs-breadcrumb-divider: '>';">
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item fw-normal">
                    <a class="color-primarycolor opacity-50" href="@Url.Action("index")">Filed Cases</a>
                </li>
                @if (!string.IsNullOrEmpty(Model.Id))
                {
                    <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("viewrecord", new { Id = Model.Id})">View Filed Case</a></li>
                }
                <li class="breadcrumb-item fw-normal active">@ViewBag.Title</li>
            </ol>
        </div>
        <div class="page-title-box d-sm-flex align-items-center justify-content-between pt-2">
            <h4 class="pagetitle mb-sm-0 fw600">@ViewBag.Title</h4>
        </div>
    </div>
</div>

@using (Html.BeginForm("Edit", "FiledCase", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <section class="section mt-3">
        <div class="bg-white rounded p-3 p-lg-4 p-xl-5 shadow">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RequestSubject, htmlAttributes: new { @class = "form-label required fw600" })
                            @Html.EditorFor(model => model.RequestSubject, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.RequestSubject, "", new { @class = "invalid-message" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    @if (Model.FileCaseStatusId == "Pending")
                    {
                        <div class="mb-3 text-break">
                            <label class="form-label required fw600" for="Case Nature">Status</label>
                            @CustomHelper.CustomDropDownList("FileCaseStatusId", Model.FileCaseStatusSelectList)
                            @Html.ValidationMessageFor(model => model.FileCaseStatusId, "", new { @class = "invalid-message" })
                        </div>
                    }
                    else
                    {
                        <div class="mb-3 text-break">
                            <div class="form-group">
                                <label class="form-label required fw600" for="Status">Status</label>
                                @Html.EditorFor(model => model.FileCaseStatusId, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.FileCaseStatusId, "", new { @class = "invalid-message" })
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CaseTypeId, htmlAttributes: new { @class = "form-label required fw600" })
                            @Html.EditorFor(model => model.CaseTypeId, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.CaseTypeId, "", new { @class = "invalid-message" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CaseNatureId, htmlAttributes: new { @class = "form-label required fw600" })
                            @Html.EditorFor(model => model.CaseNatureId, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.CaseNatureId, "", new { @class = "invalid-message" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="row mt-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "form-label fw600" })
                        @Html.TextAreaFor(model => model.Remarks, htmlAttributes: new { @class = "form-control", @rows = "3", @disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "invalid-message" })
                    </div>
                </div>
            </div>
            <hr />
            <p><strong>List of Uploaded Document(s)</strong></p>
            <div class="row">
                @if (Model.Attachments != null && Model.Attachments.Count > 0)
                {
                    <ul class="list-group">
                        @foreach (var item in Model.Attachments)
                        {
                            <li class="list-group-item">
                                @Html.DisplayFor(modelItem => item.UniqueFileName)
                                <span class="fs-19 canedit">
                                    <a href="~/Documents/@item.UniqueFileName" data-bs-placement="right" title="Download" download>
                                        <i class="fa-solid fa-download text-edit hover-color-secondarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="Download"></i>
                                    </a>
                                </span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <i>No uploaded document yet.</i>
                }
            </div>
            <hr />
            <div class="row">
                <div class="mb-3 mt-2 text-break">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ApprovalRemarks, htmlAttributes: new { @class = "form-label required fw600" })
                        @if (Model.FileCaseStatusId == "Pending")
                        {
                            @Html.EditorFor(model => model.ApprovalRemarks, new { htmlAttributes = new { @class = "form-control" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.ApprovalRemarks, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        }
                        @Html.ValidationMessageFor(model => model.ApprovalRemarks, "", new { @class = "invalid-message" })
                    </div>
                </div>
            </div>
            @*<hr />
        @if (Model.Attachments != null && Model.Attachments.Count > 0)
        {
            <p><strong>List of Uploaded Document(s)</strong></p>
            <ul class="list-group">
                @foreach (var item in Model.Attachments)
                {
                    <li class="list-group-item">
                        @Html.DisplayFor(modelItem => item.UniqueFileName)
                        <span class="fs-19 canedit">
                            <a href="~/Documents/@item.UniqueFileName" data-bs-placement="right" title="Download" download>
                                <i class="fa-solid fa-download text-edit hover-color-secondarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="Download"></i>
                            </a> &nbsp;
                        </span>
                        <span class="fs-19 candelete" onclick="triggerDeleteConfirmationModal('@item.UniqueFileName', '@Url.Action("deletefile", new { id= item.Id})')">
                            <i class="fa-solid fa-trash-can text-delete hover-color-secondarycolor cursor-pointer" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete"></i>
                        </span>
                    </li>
                }
            </ul>
        }
        else
        {
            <i>No uploaded document yet.</i>
        }*@
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <a type="button" class="btn btn-p8 bg-light hover-boxshadow me-1" href="@Url.Action("index")">@Resource.BackToList</a>
                @if (Model.SystemDefault == false && Model.FileCaseStatusId == "Pending")
                {
                    <button type="submit" class="addnewbtn btn btn-p8 hover-boxshadow hover-bg-primarycolor">@Resource.Save</button>
                }
            </div>
        </div>
    </section>
}
