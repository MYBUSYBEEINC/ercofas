@model ERCOFAS.Models.PreFiledCaseListing
@using ERCOFAS.Resources
@using ERCOFAS.Helpers;
@using ERCOFAS.Enumeration;
@{ 
    var userRole = RoleHelpers.GetMainRole();
}

@Html.DisplayFor(modelItem => Model.Listing)

<thead class="table-light">
    <tr>
        <th class="thead">Subject of Request</th>
        <th class="thead">Full Name</th>
        <th class="thead">Case Type / Case Nature</th>
        <th class="thead">Date Submitted</th>
        <th class="thead">Pre-Filing Application</th>
        <th class="thead">Documents Upload</th>
        <th class="thead text-center">Payment Status</th>
        <th class="thead text-center">Pre-Filing Status</th>
        <th class="thead text-center">@Resource.Actions</th>
    </tr>
</thead>
<tbody>
    @foreach (var item in Model.Listing)
    {
    <tr style="color: #212529;">
        <td>@Html.DisplayFor(modelItem => item.RequestSubject)</td>
        <td>@Html.DisplayFor(modelItem => item.UserName)</td>
        <td>
            @Html.DisplayFor(modelItem => item.CaseTypeId) / @Html.DisplayFor(modelItem => item.CaseNatureId)
        </td>
        <td>@Html.DisplayFor(modelItem => item.CreatedOn)</td>
        <td>
            @if (!string.IsNullOrEmpty(item.InitialReviewStatus))
            {
                <span class="@TemplateHelpers.GetLabelCss(@Html.DisplayFor(modelItem => item.InitialReviewStatus).ToString())">
                    @Html.DisplayFor(modelItem => item.InitialReviewStatus)
                </span>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
        <td>
            @if (!string.IsNullOrEmpty(item.DocumentsUploadStatus))
            {
                <span class="@TemplateHelpers.GetLabelCss(@Html.DisplayFor(modelItem => item.DocumentsUploadStatus).ToString())">
                    @Html.DisplayFor(modelItem => item.DocumentsUploadStatus)
                </span>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
        <td class="text-center">
            @if (!string.IsNullOrEmpty(item.PaymentStatus))
            {
                <span class="@TemplateHelpers.GetLabelCss(@Html.DisplayFor(modelItem => item.PaymentStatus).ToString())">
                    @Html.DisplayFor(modelItem => item.PaymentStatus)
                </span>
            } 
            else
            {
                <span>N/A</span>
            }
        </td>
        <td class="text-center">
            @if (!string.IsNullOrEmpty(item.FileCaseStatusId))
            {
                <span class="@TemplateHelpers.GetLabelCss(@Html.DisplayFor(modelItem => item.FileCaseStatusId).ToString())">
                    @Html.DisplayFor(modelItem => item.FileCaseStatusId)
                </span>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
        <td class="text-center">
            <div class="d-flex text-breakspaces actioncol">
                @if (userRole != null)
                {
                    if (userRole == UserTypeEnum.SuperAdmin.ToString() || userRole == UserTypeEnum.Client.ToString())
                    {
                        <span class="fs-19 canedit"><a href="@Url.Action("edit", new { Id = @Html.ValueFor(modelItem => item.Id) })"><i class="fa-solid fa-pen text-edit hover-color-primarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"></i></a> &nbsp;</span>
                    }
                    if (userRole == UserTypeEnum.SuperAdmin.ToString() || userRole == UserTypeEnum.Admin.ToString())
                    {
                        <span class="fs-19 canview"><a href="@Url.Action("viewrecord", new { Id = @Html.ValueFor(modelItem => item.Id) })"><i class="fa-solid fa-eye text-primary hover-color-secondarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="View"></i></a></span>
                    }
                }
            </div>
        </td>
    </tr>
    }
</tbody>

<script>
    var fileName = "@Resource.ListOfFiledCases";//the file name for excel and pdf file (Export to excel, pdf feature)
    var indexLastColumn = $('#' + tableIdPrefix + '-table').find('tr')[0].cells.length - 1;
    //initialize datatable
    var table = $('#' + tableIdPrefix + '-table').DataTable({
        dom: 'Brtip',
        "pageLength": 10,
        order: [[3, 'desc']],
        scrollY: 'auto',
        scrollX: 'auto',
        deferRender: true,
        scroller: true,
        buttons: [
            {
                extend: 'csv',
                title: fileName,
                exportOptions: { columns: getColumnsToBeExported(tableIdPrefix) }
            }, {
                extend: 'excel',
                title: fileName,
                exportOptions: { columns: getColumnsToBeExported(tableIdPrefix) }
            }, {
                extend: 'pdf',
                title: fileName,
                exportOptions: { columns: getColumnsToBeExported(tableIdPrefix) },
                customize: function (doc) {
                    var colCount = adjustPdfColWidth(tableIdPrefix);
                    doc.content[1].table.widths = colCount;
                }
            }
        ],
        "columnDefs": [{
            'targets': [indexLastColumn], // column index (start from 0)
            'orderable': false, // set orderable false for selected columns
        }]
    });

    if (canEdit == 'False') {
        $('#' + tableIdPrefix + '-table .canedit').hide();
    }
    if (canDelete == 'False') {
        $('#' + tableIdPrefix + '-table .candelete').hide();
    }

    $("#exportToExcel").click(function () {
        $(".buttons-excel").trigger("click");
    });
    $("#exportToPdf").click(function () {
        $(".buttons-pdf").trigger("click");
    });

    //initialize tooltip
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
    })

    //event listener for search, reset, and "show 10 records" buttons
    document.getElementById("searchbtn").addEventListener("click", searchTable);
    document.getElementById("resetbtn").addEventListener("click", resetTable);

    function searchTable() {
        var valToSearch = document.getElementById("search").value;
        table.search(valToSearch).draw();
    }

    function resetTable() {
        document.getElementById("search").value = "";
        table.search("").draw();
    }

    //event listener for the "show 10 records" drop down list
    for (const option of document.querySelectorAll("#" + tableIdPrefix + "-tableDropDown .custom-option")) {
        option.addEventListener('click', function () {
            if (!this.classList.contains('selected')) {
                this.parentNode.querySelector('.custom-option.selected').classList.remove('selected');
                this.classList.add('selected');
                this.closest('.select').querySelector('.select__trigger span').textContent = this.textContent;
                let chosenValue = this.getAttribute("data-value");
                table.page.len(chosenValue).draw();
            }
        })
    }
</script>