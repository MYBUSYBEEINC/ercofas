@model NetStarter.Models.PreRegistrationViewModel
@using NetStarter.CustomHelper
@using NetStarter.Resources
@{
    if (string.IsNullOrEmpty(Model.Id))
    {
        ViewBag.Title = "Pre-Register";
    }
    else
    {
        ViewBag.Title = "Edit Pre-Registration";
    }
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
}

<div class="row">
    <div class="col-12">
        <div style="--bs-breadcrumb-divider: '>';">
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item fw-normal">
                    <a class="color-primarycolor opacity-50" href="@Url.Action("index")">Pre-Registration</a>
                </li>
                @if (!string.IsNullOrEmpty(Model.Id))
                {
                    <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("viewrecord", new { Id = Model.Id})">View Pre-Registration</a></li>
                }
                <li class="breadcrumb-item fw-normal active">@ViewBag.Title</li>
            </ol>
        </div>
        <div class="page-title-box d-sm-flex align-items-center justify-content-between pt-2">
            <h4 class="pagetitle mb-sm-0 fw600">@ViewBag.Title</h4>
        </div>
    </div>
</div>

@using (Html.BeginForm("Edit", "PreRegistration", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new
{
    @class = "form-horizontal",
    role = "form",
    enctype = "multipart/form-data"
}))
{
    <section class="section mt-3">
        <div class="bg-white rounded p-3 p-lg-4 p-xl-5 shadow">
            <div class="row">
                <div class="mb-3 text-break">
                    <div class="form-group">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "form-label required fw600" })
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "invalid-message" })
                    </div>
                </div>
                <div class="mb-3 text-break">
                    <div class="form-group">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "form-label required fw600" })
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "invalid-message" })
                    </div>
                </div>
                <div class="mb-3 text-break">
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "form-label required fw600" })
                        @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "invalid-message" })
                    </div>
                </div>
                <div class="mb-3 text-break">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "form-label required fw600" })
                        @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "invalid-message" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <label class="form-label required fw600" for="Case Type">Case Type</label>
                        @CustomHelper.CustomDropDownList("RERTypeId", Model.RERTypeList)
                        @Html.ValidationMessageFor(model => model.RERTypeId, "", new { @class = "invalid-message" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <label class="form-label required fw600" for="RER Classification">RER Classification</label>
                        @CustomHelper.CustomDropDownList("RERClassificationId", Model.RERClassificationList)
                        @Html.ValidationMessageFor(model => model.RERClassificationId, "", new { @class = "invalid-message" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <label class="form-label required fw600" for="Registration Status">Registration Status</label>
                        @CustomHelper.CustomDropDownList("RegistrationStatusId", Model.RegistrationStatusList)
                        @Html.ValidationMessageFor(model => model.RegistrationStatusId, "", new { @class = "invalid-message" })
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="form-group">
                    @Html.LabelFor(model => model.Documents, htmlAttributes: new { @class = "form-label fw600" }) <i class="fa-solid fa-circle-info align-middle" data-bs-toggle="tooltip" data-bs-placement="top" title="You can upload multiple files here."></i>
                    @Html.TextBox("Documents", "", new { @type = "file", @class = "form-control", @multiple = true })
                    @Html.ValidationMessageFor(model => model.Documents, "", new { @class = "invalid-message" })
                </div>
            </div>
            <hr />
            @if (Model.Attachments != null && Model.Attachments.Count > 0)
            {
                <p><strong>List of Uploaded Document(s)</strong></p>
                <ul class="list-group">
                    @foreach (var item in Model.Attachments)
                    {
                        <li class="list-group-item">
                            @Html.DisplayFor(modelItem => item.UniqueFileName)
                            <span class="fs-19 canedit">
                                <a href="~/Documents/@item.UniqueFileName" data-bs-placement="right" title="Download" download>
                                    <i class="fa-solid fa-download text-edit hover-color-secondarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="Download"></i>
                                </a> &nbsp;
                            </span>
                            <span class="fs-19 candelete" onclick="triggerDeleteConfirmationModal('@item.UniqueFileName', '@Url.Action("deletefile", new { id= item.Id})')">
                                <i class="fa-solid fa-trash-can text-delete hover-color-secondarycolor cursor-pointer" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete"></i>
                            </span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <i>No uploaded document yet.</i>
            }
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <a type="button" class="btn btn-p8 bg-light hover-boxshadow me-1" href="@Url.Action("index")">@Resource.BackToList</a>
                    <button type="submit" class="addnewbtn btn btn-p8 hover-boxshadow hover-bg-primarycolor">@Resource.Save</button>
            </div>
        </div>
    </section>
}
