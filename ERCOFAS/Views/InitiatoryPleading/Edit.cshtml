@model ERCOFAS.Models.InitiatoryPleadingModel
@using ERCOFAS.CustomHelper
@using ERCOFAS.Resources
@using ERCOFAS.Helpers;
@using ERCOFAS.Enumeration;
@{
    if (string.IsNullOrEmpty(Model.Id))
    {
        ViewBag.Title = Resource.Add + " Initiatory Pleading";
    }
    else
    {
        ViewBag.Title = Resource.Edit + " Initiatory Pleading";
    }
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
    var userRole = RoleHelpers.GetMainRole();
}

<style type="text/css">

    .field-editor, .invalid-message {
        margin-left: 25px !important;
    }
</style>

<div class="row">
    <div class="col-12">
        <div style="--bs-breadcrumb-divider: '>';">
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item fw-normal">
                    <a class="color-primarycolor opacity-50" href="@Url.Action("index")">Initiatory Pleadings</a>
                </li>
                @if (!string.IsNullOrEmpty(Model.Id))
                {
                    <li class="breadcrumb-item fw-normal"><a class="color-primarycolor opacity-50" href="@Url.Action("viewrecord", new { Id = Model.Id})">View Initiatory Pleading</a></li>
                }
                <li class="breadcrumb-item fw-normal active">@ViewBag.Title</li>
            </ol>
        </div>
        <div class="page-title-box d-sm-flex align-items-center justify-content-between pt-2">
            <h4 class="pagetitle mb-sm-0 fw600">@ViewBag.Title</h4>
        </div>
    </div>
</div>

@using (Html.BeginForm("Edit", "InitiatoryPleading", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new
{
    @class = "form-horizontal",
    role = "form",
    enctype = "multipart/form-data"
}))
{
    <section class="section mt-3">
        <div class="bg-white rounded p-3 p-lg-4 p-xl-5 shadow">
            <h3 class="text-center text-mauve">Encode Case Docket Number</h3>
            <br />
            <br />
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        (1.) @Html.LabelFor(model => model.DocumentName, htmlAttributes: new { @class = "form-label required fw600" })
                        @Html.EditorFor(model => model.DocumentName, new { htmlAttributes = new { @class = "form-control field-editor", @readonly = "readonly" } })
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CaseType, htmlAttributes: new { @class = "form-label field-editor fw600" })
                        @Html.EditorFor(model => model.CaseType, new { htmlAttributes = new { @class = "form-control field-editor", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CaseNature, htmlAttributes: new { @class = "form-label field-editor fw600" })
                        @Html.EditorFor(model => model.CaseNature, new { htmlAttributes = new { @class = "form-control field-editor", @readonly = "readonly" } })
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="form-group">
                    (2.) <label for="applicantName" class="form-label required fw600">Applicant Name</label>
                    @Html.EditorFor(model => model.ApplicantName, new { htmlAttributes = new { @class = "form-control field-editor" } })
                    @Html.ValidationMessageFor(model => model.ApplicantName, "", new { @class = "invalid-message" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="form-group">
                    (3.) <label for="caseTitle" class="form-label required fw600">Case Title</label>
                    @Html.EditorFor(model => model.CaseTitle, new { htmlAttributes = new { @class = "form-control field-editor" } })
                    @Html.ValidationMessageFor(model => model.CaseTitle, "", new { @class = "invalid-message" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        (4.) <label for="caseDocketNumber" class="form-label required fw600">Case Docket Number</label>
                        @Html.EditorFor(model => model.DocketNumberYear, new { htmlAttributes = new { @class = "form-control field-editor", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="form-label fw600" style="margin-top: 16px;"></label>
                        @if (userRole == UserTypeEnum.SuperAdmin.ToString())
                        {
                            @Html.EditorFor(model => model.DocketNumberSequence, new { htmlAttributes = new { @class = "form-control field-editor", @maxLength = "3" } })
                            @Html.ValidationMessageFor(model => model.DocketNumberSequence, "", new { @class = "invalid-message" })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.DocketNumberSequence, new { htmlAttributes = new { @class = "form-control field-editor", @readonly = "readonly", @maxLength = "3" } })
                        }
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="form-label fw600" style="margin-top: 16px;"></label>
                        @Html.EditorFor(model => model.CaseType, new { htmlAttributes = new { @class = "form-control field-editor", @readonly = "readonly" } })
                    </div>
                </div>
            </div>
            <br />
            <div class="row mt-2">
                <div class="form-group">
                    (5.) @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label fw600" })
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control field-editor" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "invalid-message" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-10">
                    <div class="form-group">
                        (6.) <label class="form-label fw600">Documents Submitted</label>
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="form-group">
                        <label class="form-labe">Download</label>
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="form-group">
                        <label class="form-label">View</label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div>
                </div>
                <div class="col-md-12">
                    <table class="table table-responsive-sm table-striped field-editor">
                        <thead>
                            <tr>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.PreFiledAttachmentViewModels != null && Model.PreFiledAttachmentViewModels.Count > 0)
                            {
                                foreach (var item in Model.PreFiledAttachmentViewModels)
                                {                                    
                                    <tr>
                                        <td class="col-md-10">
                                            @Html.DisplayFor(modelItem => item.FileTypeName)
                                        </td>
                                        <td class="col-md-1 text-center">
                                            <span class="fs-19 canedit">
                                                <a style="cursor: pointer;" data-bs-placement="right" title="Download">                                                    
                                                    <i class="fa-solid download-document fa-download text-primary hover-color-primarycolor" data-unique-file="@item.UniqueFileName" data-bs-toggle="tooltip" data-bs-placement="top" title="Download"></i>
                                                </a>
                                            </span>
                                        </td>
                                        <td class="col-md-1">
                                            <span class="fs-19 canedit">
                                                <a href="~/Documents/@item.UniqueFileName" data-bs-placement="right" target="_blank" title="View">
                                                    <i class="fa-solid view-document fa-eye text-info hover-color-primarycolor" data-bs-toggle="tooltip" data-bs-placement="top" title="View"></i>
                                                </a>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <br />
            <div class="row mt-3">
                <div class="form-group">
                    (7.) <label class="form-label fw600">Attach Files</label> <i class="fa-solid fa-circle-info align-middle" data-bs-toggle="tooltip" data-bs-placement="top" title="You can upload multiple files here."></i>
                    @Html.TextBox("Documents", "", new { @type = "file", @class = "form-control field-editor", @multiple = true })
                    @Html.ValidationMessageFor(model => model.Documents, "", new { @class = "invalid-message" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="form-group">
                    (8.) <label class="form-label fw600">Additional Information (If any)</label>
                    @Html.EditorFor(model => model.AdditionalComment, new { htmlAttributes = new { @class = "form-control field-editor" } })
                    @Html.ValidationMessageFor(model => model.AdditionalComment, "", new { @class = "" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="form-group">
                    (9.) <label class="form-label fw600">Remarks (If any)</label>
                    @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control field-editor" } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "" })
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <a type="button" class="btn btn-p8 bg-light hover-boxshadow me-1" href="@Url.Action("index")">@Resource.Back</a>
                @if (Model.SystemDefault == false)
                {
                    <button type="button" class="addnewbtn btn btn-p8 submit-initiatory hover-boxshadow hover-bg-primarycolor">@Resource.Send</button>
                }
            </div>
        </div>
    </section>
}

@section Scripts {
        
    <script>

        $(document).ready(function () {

            $(".submit-initiatory").click(function () {
                
                var valid = validateFormFields();               
                if (!valid)
                    return false;

                var id = "#" + "DocketNumberSequence";
                var docketNumberSequence = $(id).val();
                if (docketNumberSequence === "" || docketNumberSequence === null) {
                    if ($(id).next().hasClass("invalid-message")) {
                        $(id).next().html("Required");
                        return;
                    }

                } else {

                    if (!$.isNumeric(docketNumberSequence)) {
                        $(id).next().html("Invalid sequence number, must be a numeric value.");
                        return;
                    } else
                        $(id).next().html("");

                }

                $(".form-horizontal").submit();
            });

            $(".download-document").click(function () {

                var fileName = $(this).data("unique-file");

                downloadFile(fileName);
            });           

        });               

        function downloadFile(fileName) {

            $.ajax({
                type: "POST",
                url: "/PreFiledCase/DownloadFile",
                data: { fileName: fileName },
                success: function (data) {

                    // get the file name to download.
                    const blob = new Blob([data], { type: 'application/octetstream' });
                    var a = document.createElement('a');
                    var url = window.URL.createObjectURL(blob);
                    a.href = url;
                    a.download = fileName;
                    document.body.append(a);
                    a.click();
                    a.remove();
                    window.URL.revokeObjectURL(url);
                }
                , error: function (xhr, status, error) {
                    var err = JSON.parse(xhr.responseText);
                }
            });
        }

        function validateFormFields() {
            
            var input, i, valid = true;
            input = document.getElementsByClassName("field-editor");
            
            for (i = 0; i < input.length; i++) {

                var inputValue = input[i].value;
                if ((inputValue === "" || inputValue === undefined) && $(input[i]).next().hasClass("invalid-message")) {
                    $(input[i]).next().html("Required");
                    valid = false;
                }                
            }

            return valid;
        }

    </script>

}
