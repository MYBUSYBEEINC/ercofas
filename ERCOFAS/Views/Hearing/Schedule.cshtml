@model NetStarter.Models.HearingViewModel
@using NetStarter.CustomHelper
@using NetStarter.Resources
@{
    ViewBag.Title = "Schedule";
    Layout = "~/Views/Shared/_LayoutAfterLogin.cshtml";
}

<link href="~/Content/bootstrap-datepicker.css" rel="stylesheet" />
<div class="row">
    <div class="col-12">
        <div style="--bs-breadcrumb-divider: '>';">
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item fw-normal">
                    <a class="color-primarycolor opacity-50" href="@Url.Action("index")">Hearing</a>
                </li>
                <li class="breadcrumb-item fw-normal active">@ViewBag.Title</li>
            </ol>
        </div>
        <div class="page-title-box d-sm-flex align-items-center justify-content-between pt-2">
            <h4 class="pagetitle mb-sm-0 fw600">@ViewBag.Title</h4>
        </div>
    </div>
</div>

@using (Html.BeginForm("Schedule", "Hearing", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new
{
    @class = "form-horizontal",
    role = "form",
    enctype = "multipart/form-data"
}))
{
    <section class="section mt-3">
        @Html.HiddenFor(model => model.Id)

        @if (Model.UserRoleName == "Legal Service")
        {
            @Html.HiddenFor(model => model.HearingStatus, new { Id = "HearingStatus", Value = 4 })
        }
        else
        {
            @Html.HiddenFor(model => model.HearingStatus, new { Id = "HearingStatus", Value = 1 })
        }
        <div class="bg-white rounded p-3 p-lg-4 p-xl-5 shadow">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        <label class="form-label required fw600" for="Schedule">Date of Hearing</label>
                        <div class="input-group date" data-provide="datepicker" data-date-format="mm/dd/yyyy">
                            @Html.EditorFor(model => model.Schedule, new { htmlAttributes = new { @class = "form-control date-picker" } })
                            <div class="input-group-addon">
                                <span class="glyphicon glyphicon-th"></span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.Schedule, "", new { @class = "invalid-message" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3 text-break">
                        @Html.LabelFor(model => model.HearingType, htmlAttributes: new { @class = "form-label required fw600" })
                        @CustomHelper.CustomDropDownList("HearingType", Model.HearingTypeSelectList)
                        @Html.ValidationMessageFor(model => model.HearingType, "", new { @class = "invalid-message" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-12">
                <a type="button" class="btn btn-p8 bg-light hover-boxshadow me-1" href="@Url.Action("index")">@Resource.BackToList</a>
                @if (Model.SystemDefault == false)
                {

                    <button type="submit" class="addnewbtn btn btn-p8 hover-boxshadow hover-bg-primarycolor">@Resource.Save</button>
                }
                @if (Model.SystemDefault == false && Model.UserRoleName == "Legal Service")
                {

                    <button type="button" class="cancelbtn btn btn-p8 hover-boxshadow hover-bg-primarycolor">Cancel</button>
                }
            </div>
        </div>
    </section>
}

@section Scripts {
    <script src="~/Scripts/bootstrap-datepicker.js"></script>

    <script>

        $(document).ready(function () {

            var hearingScheduleDate = "";

            if ($("#Schedule").val() !== isNaN && $("#Schedule").val() !== "") {
                hearingScheduleDate = new Date($("#Schedule").val());

                var year = hearingScheduleDate.getFullYear();

                var month = (1 + hearingScheduleDate.getMonth()).toString();
                month = month.length > 1 ? month : '0' + month;

                var day = hearingScheduleDate.getDate().toString();
                day = day.length > 1 ? day : '0' + day;

                hearingScheduleDate = month + '/' + day + '/' + year;

                $("#Schedule").val(hearingScheduleDate);
            }

            $(".select open").attr("disabled", "disabled").addClass("disabled");
            $("#HearingType").attr("readonly", true);

            $(".cancelbtn").click(function () {

                $.ajax({
                    type: 'POST',
                    url: `/Hearing/Schedule`,
                    data: JSON.stringify({
                        id: $('#Id').val(),
                        schedule: $('#Schedule').val(),
                        hearingType: parseInt($("#HearingType").val()),
                        hearingStatus: 2 // Cancelled
                    }),
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        location.href = "/Hearing/index";
                    },
                    error: function (err) {
                        console.log('There was a problem cancelling schedule of virtual hearing. Please try again later.');
                    },
                    async: true
                });
            });
        });

    </script>
}

